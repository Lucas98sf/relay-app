type Comment implements Node {
  id: ID!
  title: String
  votes: [Vote!]
}

type Community implements Node {
  about: String
  id: ID!
  name: String
  title: String
}

type Mutation {
  createPost(communityId: String, content: String, image: String, title: String, url: String): Post
}

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Post implements Node {
  comments: [Comment!]
  content: String
  id: ID!
  image: String
  title: String
  url: String
}

type Query {
  me: User
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  posts(after: String, before: String, first: Int, last: Int): QueryPostsConnection
}

type QueryPostsConnection {
  edges: [QueryPostsConnectionEdge]
  pageInfo: PageInfo!
}

type QueryPostsConnectionEdge {
  cursor: String!
  node: Post
}

type User implements Node {
  avatar: String
  communities: [Community!]
  email: String
  id: ID!
  ownedCommunities: [Community!]
  posts: [Post!]
  username: String
}

type Vote implements Node {
  id: ID!
}