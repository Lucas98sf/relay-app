type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  me: User
  posts(after: String, first: Int, before: String, last: Int): PostConnection!
  version: String!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""User data"""
type User implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!
  name: String
  email: String
  posts(after: String, first: Int, before: String, last: Int): PostConnection!
  createdAt: String
  updatedAt: String
}

"""A connection to a list of items."""
type PostConnection implements Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]!
}

"""A connection to a list of items."""
interface Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge."""
  node: Post

  """A cursor for use in pagination."""
  cursor: String!
}

"""Post data"""
type Post implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!
  title: String
  content: String
  image: String
  author: User
  createdAt: String
  updatedAt: String
}

type Mutation {
  UserLogin(input: UserLoginInput!): UserLoginPayload
  UserRegister(input: UserRegisterInput!): UserRegisterPayload
  PostCreate(input: PostCreateInput!): PostCreatePayload
}

type UserLoginPayload {
  token: NonEmptyString
  me: User

  """Default error field resolver."""
  error: String

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

"""A string that cannot be passed as an empty value"""
scalar NonEmptyString

input UserLoginInput {
  email: EmailAddress
  password: NonEmptyString
  clientMutationId: String
}

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

type UserRegisterPayload {
  token: NonEmptyString
  me: User

  """Default error field resolver."""
  error: String

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

input UserRegisterInput {
  name: UsernameType
  email: EmailAddress
  password: PasswordType
  clientMutationId: String
}

"""
Minimum 3 characters, Maximum 255 characters, only letters, numbers and underscores
"""
scalar UsernameType

"""
Minimum eight characters, Maximum 255 characters, at least one letter and one number
"""
scalar PasswordType

type PostCreatePayload {
  postEdge: PostEdge

  """Default error field resolver."""
  error: String

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

input PostCreateInput {
  title: TitleType
  content: ContentType
  clientMutationId: String
}

"""Minimum 1 characters, Maximum 100 characters"""
scalar TitleType

"""Minimum 1 characters, Maximum 9999 characters"""
scalar ContentType