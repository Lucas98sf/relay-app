type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  me: User
  posts(after: String, first: Int, before: String, last: Int): PostConnection!
  communities(after: String, first: Int, before: String, last: Int): CommunityConnection!
  version: String!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""User data"""
type User implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!
  username: String
  email: String
  avatar: String
  posts(after: String, first: Int, before: String, last: Int): PostConnection!
  comments(after: String, first: Int, before: String, last: Int): CommentConnection!
  communities(after: String, first: Int, before: String, last: Int): CommunityConnection!
  createdAt: String
  updatedAt: String
}

"""A connection to a list of items."""
type PostConnection implements Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]!
}

"""A connection to a list of items."""
interface Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge."""
  node: Post

  """A cursor for use in pagination."""
  cursor: String!
}

"""Post data"""
type Post implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!
  title: String
  content: String
  image: String
  url: String
  community: Community
  author: User

  """Total votes count (upvotes - downvotes)"""
  votesCount: Int!
  comments(after: String, first: Int, before: String, last: Int): CommentConnection!
  createdAt: String
  updatedAt: String
}

"""Community data"""
type Community implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!
  name: String
  title: String
  about: String
  owner: User
  members(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): UserConnection!
  posts(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): PostConnection!
  createdAt: String
  updatedAt: String
}

"""A connection to a list of items."""
type UserConnection implements Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User

  """A cursor for use in pagination."""
  cursor: String!
}

"""A connection to a list of items."""
type CommentConnection implements Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommentEdge]!
}

"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge."""
  node: Comment

  """A cursor for use in pagination."""
  cursor: String!
}

"""Comment data"""
type Comment implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!
  content: String
  post: Post
  author: User

  """Total votes count (upvotes - downvotes)"""
  votesCount: Int!
  createdAt: String
  updatedAt: String
}

"""A connection to a list of items."""
type CommunityConnection implements Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommunityEdge]!
}

"""An edge in a connection."""
type CommunityEdge {
  """The item at the end of the edge."""
  node: Community

  """A cursor for use in pagination."""
  cursor: String!
}

type Mutation {
  UserLogin(input: UserLoginInput!): UserLoginPayload
  UserRegister(input: UserRegisterInput!): UserRegisterPayload
  PostCreate(input: PostCreateInput!): PostCreatePayload
  CommentCreate(input: CommentCreateInput!): CommentCreatePayload
  CommunityCreate(input: CommunityCreateInput!): CommunityCreatePayload
  CommunityJoin(input: CommunityJoinInput!): CommunityJoinPayload
  VoteCreate(input: VoteCreateInput!): VoteCreatePayload
  VoteDelete(input: VoteDeleteInput!): VoteDeletePayload
}

type UserLoginPayload {
  token: NonEmptyString
  me: User

  """Default error field resolver."""
  error: String

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

"""A string that cannot be passed as an empty value"""
scalar NonEmptyString

input UserLoginInput {
  username: NonEmptyString
  password: NonEmptyString
  clientMutationId: String
}

type UserRegisterPayload {
  token: NonEmptyString
  me: User

  """Default error field resolver."""
  error: String

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

input UserRegisterInput {
  username: UsernameType
  email: EmailAddress
  password: PasswordType
  avatar: URL
  clientMutationId: String
}

"""
Minimum 3 characters, Maximum 30 characters, only letters, numbers and underscores
"""
scalar UsernameType

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress @specifiedBy(url: "https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address")

"""
Minimum eight characters, Maximum 50 characters, at least one letter and one number
"""
scalar PasswordType

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

type PostCreatePayload {
  postEdge: PostEdge

  """Default error field resolver."""
  error: String

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

input PostCreateInput {
  title: PostTitleType
  content: PostContentType
  image: URL
  url: URL
  communityId: ID!
  clientMutationId: String
}

"""Minimum 1 characters, Maximum 300 characters"""
scalar PostTitleType

"""Minimum 0 characters, Maximum 9999 characters"""
scalar PostContentType

type CommentCreatePayload {
  commentEdge: CommentEdge
  post: Post

  """Default error field resolver."""
  error: String

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

input CommentCreateInput {
  postId: ID!
  content: CommentContentType
  clientMutationId: String
}

"""Minimum 1 characters, Maximum 9999 characters"""
scalar CommentContentType

type CommunityCreatePayload {
  communityEdge: CommunityEdge

  """Default error field resolver."""
  error: String

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

input CommunityCreateInput {
  name: UsernameType
  title: CommunityTitleType
  about: CommunityAboutType
  clientMutationId: String
}

"""Minimum 1 characters, Maximum 50 characters"""
scalar CommunityTitleType

"""Minimum 1 characters, Maximum 300 characters"""
scalar CommunityAboutType

type CommunityJoinPayload {
  communityEdge: CommunityEdge

  """Default error field resolver."""
  error: String

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

input CommunityJoinInput {
  communityId: ID!
  clientMutationId: String
}

type VoteCreatePayload {
  comment: Comment
  post: Post

  """Default error field resolver."""
  error: String

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

input VoteCreateInput {
  postId: ID
  commentId: ID
  type: VoteType
  clientMutationId: String
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

type VoteDeletePayload {
  """Default error field resolver."""
  error: String

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

input VoteDeleteInput {
  voteId: ID
  clientMutationId: String
}